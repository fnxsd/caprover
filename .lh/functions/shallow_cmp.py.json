{
    "sourceFile": "functions/shallow_cmp.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1701774327171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1701774338011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,4 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+\n+def compare_folders()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774345445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n #!/usr/bin/env python3\n # -*- coding: utf-8 -*-\n \n-def compare_folders()\n\\ No newline at end of file\n+def compare_folders(p1, p2\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774352013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n #!/usr/bin/env python3\n # -*- coding: utf-8 -*-\n \n-def compare_folders(p1, p2\n\\ No newline at end of file\n+def compare_folders(p1, p2=None):\n+    if p2 \n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774363055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n #!/usr/bin/env python3\n # -*- coding: utf-8 -*-\n-\n+from pathlib import Path\n def compare_folders(p1, p2=None):\n\\ No newline at end of file\n-    if p2 \n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774373522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,17 @@\n #!/usr/bin/env python3\n # -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr\n from pathlib import Path\n+from dataclasses import dataclass\n+from os import PathLike\n+\n+\n+StrPath: TypeAlias = str | PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n+\n def compare_folders(p1, p2=None):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774383607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,8 @@\n BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n \n-def compare_folders(p1, p2=None):\n+def compare_folders(p1, p2:Optional[StrPath]=None):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774389728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,17 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr\n+from pathlib import Path\n+from dataclasses import dataclass\n+from os import PathLike\n+\n+\n+StrPath: TypeAlias = str | PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774402916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,21 +14,5 @@\n def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr\n-from pathlib import Path\n-from dataclasses import dataclass\n-from os import PathLike\n-\n-\n-StrPath: TypeAlias = str | PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n-\n-def compare_folders(p1, p2:Optional[StrPath]=None):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n\\ No newline at end of file\n+    p1 = Path(p1).resolve()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774414295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr\n+from pathlib import Path\n+from dataclasses import dataclass\n+from os import PathLike\n+\n+\n+StrPath: TypeAlias = str | PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n+\n+def exa\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = Path(p1).expanduser().resolve()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774420301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr\n+from pathlib import Path\n+from dataclasses import dataclass\n+from os import PathLike\n+\n+\n+StrPath: TypeAlias = str | PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(path).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = Path(p1).expanduser().resolve()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774427998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from typing import Optional,Sequence,TypeAlias,AnyStr\n from pathlib import Path\n from dataclasses import dataclass\n from os import PathLike\n+import os\n \n \n StrPath: TypeAlias = str | PathLike[str]  # stable\n BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n@@ -17,43 +18,5 @@\n def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n-    p1 = Path(p1).expanduser().resolve()\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr\n-from pathlib import Path\n-from dataclasses import dataclass\n-from os import PathLike\n-\n-\n-StrPath: TypeAlias = str | PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n-\n-def exa\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = Path(p1).expanduser().resolve()\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr\n-from pathlib import Path\n-from dataclasses import dataclass\n-from os import PathLike\n-\n-\n-StrPath: TypeAlias = str | PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = Path(p1).resolve()\n\\ No newline at end of file\n+    p1 = Path(p1).expanduser().resolve()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774435288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,16 @@\n # -*- coding: utf-8 -*-\n from typing import Optional,Sequence,TypeAlias,AnyStr\n from pathlib import Path\n from dataclasses import dataclass\n-from os import PathLike\n+\n import os\n \n \n-StrPath: TypeAlias = str | PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | PathLike[str] | PathLike[bytes]  \n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n \n def expand_path(path:StrPath) -> Path:\n     return Path(path).expanduser().resolve()\n \n"
                },
                {
                    "date": 1701774445043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n \n def expand_path(path:StrPath) -> Path:\n-    return Path(path).expanduser().resolve()\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n \n def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n     if p2 is None:\n         p2 = p1\n"
                },
                {
                    "date": 1701774453481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,5 +18,5 @@\n def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n-    p1 = Path(p1).expanduser().resolve()\n\\ No newline at end of file\n+    p1 = expand_path(p1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774460100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,5 +18,6 @@\n def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n-    p1 = expand_path(p1)\n\\ No newline at end of file\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774476875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \n def expand_path(path:StrPath) -> Path:\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None):\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*,):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n"
                },
                {
                    "date": 1701774483459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \n def expand_path(path:StrPath) -> Path:\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*,):\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[StrPath]]=None, only_):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n"
                },
                {
                    "date": 1701774493124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \n def expand_path(path:StrPath) -> Path:\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[StrPath]]=None, only_):\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[StrPath]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n"
                },
                {
                    "date": 1701774504094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n #!/usr/bin/env python3\n # -*- coding: utf-8 -*-\n from typing import Optional,Sequence,TypeAlias,AnyStr\n from pathlib import Path\n-from dataclasses import dataclass\n \n import os\n \n \n"
                },
                {
                    "date": 1701774512136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from pathlib import Path\n+\n+import os\n+\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[StrPath]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774524290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from pathlib import Path\n+\n+import os\n+\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath]]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774544393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from pathlib import Path\n+\n+import os\n+from diff\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774549966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+from diff\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774563061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+from diff_cover.diff_cover_tool import G\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774572816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from pathlib import Path\n \n import os\n from difflib import SequenceMatcher\n-from diff_cover.diff_cover_tool import G\n+from diff_cover.diff_cover_tool import HtmlReportGenerator\n \n StrPath: TypeAlias = str | os.PathLike[str]  # stable\n BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n@@ -19,116 +19,5 @@\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n-from pathlib import Path\n-\n-import os\n-from difflib import SequenceMatcher\n-from diff\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n-\n-def expand_path(path:StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n-from pathlib import Path\n-\n-import os\n-from diff\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n-\n-def expand_path(path:StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n-from pathlib import Path\n-\n-import os\n-\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n-\n-def expand_path(path:StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath]]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n-from pathlib import Path\n-\n-import os\n-\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n-\n-def expand_path(path:StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[StrPath]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr\n-from pathlib import Path\n-\n-import os\n-\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n-\n-def expand_path(path:StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[StrPath]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n     p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774596998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from pathlib import Path\n \n import os\n from difflib import SequenceMatcher\n-from diff_cover.diff_cover_tool import HtmlReportGenerator\n+from diff_cover.diff_cover_tool import HtmlReportGenerato\n \n StrPath: TypeAlias = str | os.PathLike[str]  # stable\n BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n"
                },
                {
                    "date": 1701774610334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+    \"\"\"\"\"\"\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774617021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,33 +14,12 @@\n def expand_path(path:StrPath) -> Path:\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    \"\"\"\"\"\"\n+    \"\"\"\n+    \n+    \"\"\"\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n-from pathlib import Path\n-\n-import os\n-from difflib import SequenceMatcher\n-from diff_cover.diff_cover_tool import HtmlReportGenerato\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n-\n-def expand_path(path:StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n     p2 = expand_path(p2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774622900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,12 @@\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n     \"\"\"\n-    \n+    Compare two folders.\n     \"\"\"\n     if p2 is None:\n         p2 = p1\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n\\ No newline at end of file\n-    p2 = expand_path(p2)\n+    p2 = expand_path(p2)\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774677092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,5 +22,16 @@\n         p2 = p1\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n     p2 = expand_path(p2)\n-    \n\\ No newline at end of file\n+    if ignore:\n+        if not isinstance(ignore, list):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+    if not p1.is_dir():\n+        raise NotADirectoryError(f\"{p1} is not a directory.\")\n+    if not p2.is_dir():\n+        raise NotADirectoryError(f\"{p2} is not a directory.\")\n+    if recursive:\n+        return _compare_folders_recursive(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n+    else:\n+        return _compare_folders(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774685766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n def expand_path(path:StrPath) -> Path:\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[StrPath, CaSequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n     \"\"\"\n     Compare two folders.\n     \"\"\"\n     if p2 is None:\n"
                },
                {
                    "date": 1701774707164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+\n+def expand_path(path:StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Union[StrPath, Callable[[StrPath],bool],Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+    \"\"\"\n+    Compare two folders.\n+    \"\"\"\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n+    if ignore:\n+        if not isinstance(ignore, list):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+    if not p1.is_dir():\n+        raise NotADirectoryError(f\"{p1} is not a directory.\")\n+    if not p2.is_dir():\n+        raise NotADirectoryError(f\"{p2} is not a directory.\")\n+    if recursive:\n+        return _compare_folders_recursive(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n+    else:\n+        return _compare_folders(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774713046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n def expand_path(path:StrPath) -> Path:\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Union[StrPath, Callable[[StrPath],bool],Sequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Union[StrPath, Callable[[StrPath],bool],Sequence[Union[StrPath, Callable[[StrPath],bool]]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n     \"\"\"\n     Compare two folders.\n     \"\"\"\n     if p2 is None:\n@@ -33,42 +33,5 @@\n         raise NotADirectoryError(f\"{p2} is not a directory.\")\n     if recursive:\n         return _compare_folders_recursive(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n     else:\n-        return _compare_folders(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n-from pathlib import Path\n-\n-import os\n-from difflib import SequenceMatcher\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n-\n-def expand_path(path:StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[StrPath, CaSequence[Union[StrPath, Callable[[StrPath],bool]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n-    \"\"\"\n-    Compare two folders.\n-    \"\"\"\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-    if ignore:\n-        if not isinstance(ignore, list):\n-            ignore = [ignore]\n-        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n-    if not p1.is_dir():\n-        raise NotADirectoryError(f\"{p1} is not a directory.\")\n-    if not p2.is_dir():\n-        raise NotADirectoryError(f\"{p2} is not a directory.\")\n-    if recursive:\n-        return _compare_folders_recursive(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n-    else:\n         return _compare_folders(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774737080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,38 @@\n #!/usr/bin/env python3\n # -*- coding: utf-8 -*-\n-from typing import Optional,Sequence,TypeAlias,AnyStr,Union,Callable\n+from typing import Optional, Sequence, TypeAlias, AnyStr, Union, Callable\n from pathlib import Path\n \n import os\n from difflib import SequenceMatcher\n \n StrPath: TypeAlias = str | os.PathLike[str]  # stable\n BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]  \n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]\n \n-def expand_path(path:StrPath) -> Path:\n+\n+def expand_path(path: StrPath) -> Path:\n     return Path(os.path.expandvars(path)).expanduser().resolve()\n \n-def compare_folders(p1:StrPath, p2:Optional[StrPath]=None,*, ignore:Optional[Union[StrPath, Callable[[StrPath],bool],Sequence[Union[StrPath, Callable[[StrPath],bool]]]]]=None, only_files=False, only_folders=False, recursive=False, verbose=False,):\n+\n+def compare_folders(\n+    p1: StrPath,\n+    p2: Optional[StrPath] = None,\n+    *,\n+    ignore: Optional[\n+        Union[\n+            StrPath,\n+            Callable[[StrPath], bool],\n+            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n+        ]\n+    ] = None,\n+    only_files=False,\n+    only_folders=False,\n+    recursive=False,\n+    verbose=False,\n+):\n     \"\"\"\n     Compare two folders.\n     \"\"\"\n     if p2 is None:\n@@ -23,15 +40,29 @@\n         p1 = Path.cwd()\n     p1 = expand_path(p1)\n     p2 = expand_path(p2)\n     if ignore:\n-        if not isinstance(ignore, list):\n+        if not isinstance(ignore, Collection):\n             ignore = [ignore]\n         ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n     if not p1.is_dir():\n         raise NotADirectoryError(f\"{p1} is not a directory.\")\n     if not p2.is_dir():\n         raise NotADirectoryError(f\"{p2} is not a directory.\")\n     if recursive:\n-        return _compare_folders_recursive(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n+        return _compare_folders_recursive(\n\\ No newline at end of file\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n     else:\n-        return _compare_folders(p1, p2, ignore=ignore, only_files=only_files, only_folders=only_folders, verbose=verbose)\n+        return _compare_folders(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n"
                },
                {
                    "date": 1701774753001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,71 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Collection, Optional, Sequence, TypeAlias, AnyStr, Union, Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]\n+\n+\n+def expand_path(path: StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+\n+def compare_folders(\n+    p1: StrPath,\n+    p2: Optional[StrPath] = None,\n+    *,\n+    ignore: Optional[\n+        Union[\n+            StrPath,\n+            Callable[[StrPath], bool],\n+            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n+        ]\n+    ] = None,\n+    only_files=False,\n+    only_folders=False,\n+    recursive=False,\n+    verbose=False,\n+):\n+    \"\"\"\n+    Compare two folders.\n+    \"\"\"\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n+    if ignore:\n+        if not isinstance(ignore, Collection):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+    if not p1.is_dir():\n+        raise NotADirectoryError(f\"{p1} is not a directory.\")\n+    if not p2.is_dir():\n+        raise NotADirectoryError(f\"{p2} is not a directory.\")\n+    if recursive:\n+        return _compare_folders_recursive(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+    else:\n+        return _compare_folders(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+\n+\n+def \n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774816455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,73 +67,6 @@\n             verbose=verbose,\n         )\n \n \n-def \n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Optional, Sequence, TypeAlias, AnyStr, Union, Callable\n-from pathlib import Path\n-\n-import os\n-from difflib import SequenceMatcher\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]\n-\n-\n-def expand_path(path: StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-\n-def compare_folders(\n-    p1: StrPath,\n-    p2: Optional[StrPath] = None,\n-    *,\n-    ignore: Optional[\n-        Union[\n-            StrPath,\n-            Callable[[StrPath], bool],\n-            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n-        ]\n-    ] = None,\n-    only_files=False,\n-    only_folders=False,\n-    recursive=False,\n-    verbose=False,\n-):\n-    \"\"\"\n-    Compare two folders.\n-    \"\"\"\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-    if ignore:\n-        if not isinstance(ignore, Collection):\n-            ignore = [ignore]\n-        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n-    if not p1.is_dir():\n-        raise NotADirectoryError(f\"{p1} is not a directory.\")\n-    if not p2.is_dir():\n-        raise NotADirectoryError(f\"{p2} is not a directory.\")\n-    if recursive:\n-        return _compare_folders_recursive(\n-            p1,\n-            p2,\n-            ignore=ignore,\n-            only_files=only_files,\n-            only_folders=only_folders,\n-            verbose=verbose,\n-        )\n-    else:\n-        return _compare_folders(\n-            p1,\n-            p2,\n-            ignore=ignore,\n-            only_files=only_files,\n-            only_folders=only_folders,\n-            verbose=verbose,\n-        )\n\\ No newline at end of file\n+def folder_names(in_folder: StrPath):\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774824233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,11 @@\n         )\n \n \n def folder_names(in_folder: StrPath):\n+    \"\"\"\n+    Return a list of folder names in the given folder.\n+    \"\"\"\n+    return [f.name for f in Path(in_folder).iterdir() if f.is_dir()]\n+\n+def file_names(in_folder: StrPath):\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774834863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Collection, Optional, Sequence, TypeAlias, AnyStr, Union, Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]\n+\n+\n+def expand_path(path: StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+\n+def compare_folders(\n+    p1: StrPath,\n+    p2: Optional[StrPath] = None,\n+    *,\n+    ignore: Optional[\n+        Union[\n+            StrPath,\n+            Callable[[StrPath], bool],\n+            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n+        ]\n+    ] = None,\n+    only_files=False,\n+    only_folders=False,\n+    recursive=False,\n+    verbose=False,\n+):\n+    \"\"\"\n+    Compare two folders.\n+    \"\"\"\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n+    if ignore:\n+        if not isinstance(ignore, Collection):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+    if not p1.is_dir():\n+        raise NotADirectoryError(f\"{p1} is not a directory.\")\n+    if not p2.is_dir():\n+        raise NotADirectoryError(f\"{p2} is not a directory.\")\n+    if recursive:\n+        return _compare_folders_recursive(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+    else:\n+        return _compare_folders(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+\n+\n+def folder_names(in_folder: StrPath):\n+    \"\"\"\n+    Return a list of folder names in the given folder.\n+    \"\"\"\n+    return [f.name for f in Path(in_folder).iterdir() if f.is_dir()]\n+\n+def file_names(in_folder: StrPath):\n+    \"\"\"\n+    Return a list of file names in the given folder.\n+    \"\"\"\n+    return [f.name for f in Path(in_folder).iterdir() if f.is_file()]\n+\n+def ignore_\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701774845383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,83 +79,5 @@\n     Return a list of file names in the given folder.\n     \"\"\"\n     return [f.name for f in Path(in_folder).iterdir() if f.is_file()]\n \n-def ignore_\n-#!/usr/bin/env python3\n-# -*- coding: utf-8 -*-\n-from typing import Collection, Optional, Sequence, TypeAlias, AnyStr, Union, Callable\n-from pathlib import Path\n-\n-import os\n-from difflib import SequenceMatcher\n-\n-StrPath: TypeAlias = str | os.PathLike[str]  # stable\n-BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n-GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n-StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]\n-\n-\n-def expand_path(path: StrPath) -> Path:\n-    return Path(os.path.expandvars(path)).expanduser().resolve()\n-\n-\n-def compare_folders(\n-    p1: StrPath,\n-    p2: Optional[StrPath] = None,\n-    *,\n-    ignore: Optional[\n-        Union[\n-            StrPath,\n-            Callable[[StrPath], bool],\n-            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n-        ]\n-    ] = None,\n-    only_files=False,\n-    only_folders=False,\n-    recursive=False,\n-    verbose=False,\n-):\n-    \"\"\"\n-    Compare two folders.\n-    \"\"\"\n-    if p2 is None:\n-        p2 = p1\n-        p1 = Path.cwd()\n-    p1 = expand_path(p1)\n-    p2 = expand_path(p2)\n-    if ignore:\n-        if not isinstance(ignore, Collection):\n-            ignore = [ignore]\n-        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n-    if not p1.is_dir():\n-        raise NotADirectoryError(f\"{p1} is not a directory.\")\n-    if not p2.is_dir():\n-        raise NotADirectoryError(f\"{p2} is not a directory.\")\n-    if recursive:\n-        return _compare_folders_recursive(\n-            p1,\n-            p2,\n-            ignore=ignore,\n-            only_files=only_files,\n-            only_folders=only_folders,\n-            verbose=verbose,\n-        )\n-    else:\n-        return _compare_folders(\n-            p1,\n-            p2,\n-            ignore=ignore,\n-            only_files=only_files,\n-            only_folders=only_folders,\n-            verbose=verbose,\n-        )\n-\n-\n-def folder_names(in_folder: StrPath):\n-    \"\"\"\n-    Return a list of folder names in the given folder.\n-    \"\"\"\n-    return [f.name for f in Path(in_folder).iterdir() if f.is_dir()]\n-\n-def file_names(in_folder: StrPath):\n-    \n\\ No newline at end of file\n+def load_ignore_\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701775721586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Collection, Optional, Sequence, TypeAlias, AnyStr, Union, Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]\n+\n+\n+def expand_path(path: StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+\n+def compare_folders(\n+    p1: StrPath,\n+    p2: Optional[StrPath] = None,\n+    *,\n+    ignore: Optional[\n+        Union[\n+            StrPath,\n+            Callable[[StrPath], bool],\n+            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n+        ]\n+    ] = None,\n+    only_files=False,\n+    only_folders=False,\n+    recursive=False,\n+    verbose=False,\n+):\n+    \"\"\"\n+    Compare two folders.\n+    \"\"\"\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n+    if ignore:\n+        if not isinstance(ignore, Collection):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+    if not p1.is_dir():\n+        raise NotADirectoryError(f\"{p1} is not a directory.\")\n+    if not p2.is_dir():\n+        raise NotADirectoryError(f\"{p2} is not a directory.\")\n+    if recursive:\n+        return _compare_folders_recursive(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+    else:\n+        return _compare_folders(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+\n+\n+def folder_names(in_folder: StrPath):\n+    \"\"\"\n+    Return a list of folder names in the given folder.\n+    \"\"\"\n+    return [f.name for f in Path(in_folder).iterdir() if f.is_dir()]\n+\n+def file_names(in_folder: StrPath):\n+    \"\"\"\n+    Return a list of file names in the given folder.\n+    \"\"\"\n+    return [f.name for f in Path(in_folder).iterdir() if f.is_file()]\n+\n+def _compare_folders(\n\\ No newline at end of file\n"
                },
                {
                    "date": 1701789775018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+#!/usr/bin/env python3\n+# -*- coding: utf-8 -*-\n+from typing import Collection, Optional, Sequence, TypeAlias, AnyStr, Union, Callable\n+from pathlib import Path\n+\n+import os\n+from difflib import SequenceMatcher\n+\n+StrPath: TypeAlias = str | os.PathLike[str]  # stable\n+BytesPath: TypeAlias = bytes | os.PathLike[bytes]  # stable\n+GenericPath: TypeAlias = AnyStr | os.PathLike[AnyStr]\n+StrOrBytesPath: TypeAlias = str | bytes | os.PathLike[str] | os.PathLike[bytes]\n+\n+\n+def expand_path(path: StrPath) -> Path:\n+    return Path(os.path.expandvars(path)).expanduser().resolve()\n+\n+\n+def compare_folders(\n+    p1: StrPath,\n+    p2: Optional[StrPath] = None,\n+    *,\n+    ignore: Optional[\n+        Union[\n+            StrPath,\n+            Callable[[StrPath], bool],\n+            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n+        ]\n+    ] = None,\n+    only_files=False,\n+    only_folders=False,\n+    recursive=False,\n+    verbose=False,\n+):\n+    \"\"\"\n+    Compare two folders.\n+    \"\"\"\n+    if p2 is None:\n+        p2 = p1\n+        p1 = Path.cwd()\n+    p1 = expand_path(p1)\n+    p2 = expand_path(p2)\n+    if ignore:\n+        if not isinstance(ignore, Collection):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+    if not p1.is_dir():\n+        raise NotADirectoryError(f\"{p1} is not a directory.\")\n+    if not p2.is_dir():\n+        raise NotADirectoryError(f\"{p2} is not a directory.\")\n+    if recursive:\n+        return _compare_folders_recursive(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+    else:\n+        return _compare_folders(\n+            p1,\n+            p2,\n+            ignore=ignore,\n+            only_files=only_files,\n+            only_folders=only_folders,\n+            verbose=verbose,\n+        )\n+\n+\n+def folder_names(in_folder: StrPath):\n+    \"\"\"\n+    Return a list of folder names in the given folder.\n+    \"\"\"\n+    return [f.name for f in Path(in_folder).iterdir() if f.is_dir()]\n+\n+def file_names(in_folder: StrPath):\n+    \"\"\"\n+    Return a list of file names in the given folder.\n+    \"\"\"\n+    return [f.name for f in Path(in_folder).iterdir() if f.is_file()]\n+\n+def _compare_folders(\n+            p1: Path,\n+    p2: Path,\n+    *,\n+    ignore: Optional[\n+        Union[\n+            StrPath,\n+            Callable[[StrPath], bool],\n+            Sequence[Union[StrPath, Callable[[StrPath], bool]]],\n+        ]\n+    ] = None,\n+    only_files=False,\n+    only_folders=False,\n+    verbose=False,\n+):\n+    \"\"\"\n+    Compare two folders.\n+    \"\"\"\n+    if ignore:\n+        if not isinstance(ignore, Collection):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+    if not p1.is_dir():\n+        raise NotADirectoryError(f\"{p1} is not a directory.\")\n+    if not p2.is_dir():\n+        raise NotADirectoryError(f\"{p2} is not a directory.\")\n+    p1_folders = folder_names(p1)\n+    p2_folders = folder_names(p2)\n+    p1_files = file_names(p1)\n+    p2_files = file_names(p2)\n+    if ignore:\n+        if not isinstance(ignore, Collection):\n+            ignore = [ignore]\n+        ignore = [expand_path(p) if isinstance(p, str) else p for p in ignore]\n+        p1_folders = [\n+            f\n+            for f in p1_folders\n+            if not any(\n+                [i(f) if callable(i) else f == i for i in ignore]\n+            )\n+        ]\n+        p2_folders = [\n+            f\n+            for f in p2_folders\n+            if not any(\n+                [i(f) if callable(i) else f == i for i in ignore]\n+            )\n+        ]\n+        p1_files = [\n+            f\n+            for f in p1_files\n+            if not any(\n+                [i(f) if callable(i) else f == i for i in ignore]\n+            )\n+        ]\n+        p2_files = [\n+            f\n+            for f in p2_files\n+            if not any(\n+                [i(f) if callable(i) else f == i for i in ignore]\n+            )\n+        ]\n+    if verbose:\n+        print(f\"Comparing {p1} and {p2}\")\n+        print(f\"Subfolders in {p1}: {p1_folders}\")\n+        print(f\"Subfolders in {p2}: {p2_folders}\")\n+        print(f\"Files in {p1}: {p1_files}\")\n+        print(f\"Files in {p2}:\n\\ No newline at end of file\n"
                }
            ],
            "date": 1701774327171,
            "name": "Commit-0",
            "content": ""
        }
    ]
}