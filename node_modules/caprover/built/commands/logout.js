#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const StdOutUtil_1 = require("../utils/StdOutUtil");
const Constants_1 = require("../utils/Constants");
const CliHelper_1 = require("../utils/CliHelper");
const ValidationsHandler_1 = require("../utils/ValidationsHandler");
const Command_1 = require("./Command");
const K = Constants_1.default.COMMON_KEYS;
class List extends Command_1.default {
    constructor() {
        super(...arguments);
        this.command = 'logout';
        this.description = 'Logout from a CapRover machine and clear auth info.';
        this.machines = CliHelper_1.default.get().getMachinesAsOptions();
        this.options = (params) => [
            this.getDefaultConfigFileOption(),
            {
                name: K.name,
                char: 'n',
                env: 'CAPROVER_NAME',
                type: 'list',
                message: params
                    ? 'select the CapRover machine name you want to logout from'
                    : 'CapRover machine name to logout from',
                choices: this.machines,
                filter: (name) => !this.findParamValue(params, K.name)
                    ? ValidationsHandler_1.userCancelOperation(!name, true) || name
                    : name.trim(),
                validate: (name) => ValidationsHandler_1.getErrorForMachineName(name, true)
            },
            {
                name: 'confirmedToLogout',
                type: 'confirm',
                message: () => 'are you sure you want to logout from this CapRover machine?',
                default: false,
                hide: true,
                when: () => this.paramFrom(params, K.name) === Command_1.ParamType.Question,
                preProcessParam: (param) => param && ValidationsHandler_1.userCancelOperation(!param.value)
            }
        ];
    }
    preAction(cmdLineoptions) {
        return __awaiter(this, void 0, void 0, function* () {
            StdOutUtil_1.default.printMessage('Logout from a CapRover machine...\n');
            return Promise.resolve(cmdLineoptions);
        });
    }
    action(params) {
        return __awaiter(this, void 0, void 0, function* () {
            CliHelper_1.default.get().logoutMachine(this.findParamValue(params, K.name).value);
        });
    }
}
exports.default = List;
//# sourceMappingURL=logout.js.map