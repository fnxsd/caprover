#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line: no-var-requires
const packagejson = require('../../package.json');
const updateNotifier = require("update-notifier");
const versionOfNode = Number(process.version.split('.')[0]);
if (versionOfNode < 8) {
    console.log('Unsupported version of node. You need to update your local NodeJS version.');
    process.exit(1);
}
updateNotifier({ pkg: packagejson }).notify({ isGlobal: true });
const StdOutUtil_1 = require("../utils/StdOutUtil");
const program = require("commander");
const login_1 = require("./login");
const list_1 = require("./list");
const logout_1 = require("./logout");
const deploy_1 = require("./deploy");
const serversetup_1 = require("./serversetup");
const api_1 = require("./api");
console.log('');
console.log('');
// Setup
program.version(packagejson.version).description(packagejson.description);
// Commands
const commands = [
    new serversetup_1.default(program),
    new login_1.default(program),
    new list_1.default(program),
    new logout_1.default(program),
    new deploy_1.default(program),
    new api_1.default(program)
];
commands.forEach(c => c.build());
// Error on unknown commands
program.on('command:*', () => {
    const wrongCommands = program.args.join(' ');
    StdOutUtil_1.default.printError(`Invalid command: ${wrongCommands}\nSee --help for a list of available commands.\n`, true);
});
program.parse(process.argv);
if (!process.argv.slice(2).length) {
    program.outputHelp();
}
//# sourceMappingURL=caprover.js.map