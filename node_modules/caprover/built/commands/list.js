#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const StdOutUtil_1 = require("../utils/StdOutUtil");
const StorageHelper_1 = require("../utils/StorageHelper");
const Command_1 = require("./Command");
class List extends Command_1.default {
    constructor() {
        super(...arguments);
        this.command = 'list';
        this.aliases = ['ls'];
        this.description = 'List all CapRover machines currently logged in.';
    }
    preAction(cmdLineoptions) {
        return __awaiter(this, void 0, void 0, function* () {
            StdOutUtil_1.default.printMessage('Logged in CapRover Machines:\n');
            return Promise.resolve(cmdLineoptions);
        });
    }
    action(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const machines = StorageHelper_1.default.get().getMachines();
            machines.forEach(StdOutUtil_1.default.displayColoredMachine);
            if (machines.length) {
                StdOutUtil_1.default.printMessage('');
            }
        });
    }
}
exports.default = List;
//# sourceMappingURL=list.js.map