#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const StdOutUtil_1 = require("../utils/StdOutUtil");
const Constants_1 = require("../utils/Constants");
const Utils_1 = require("../utils/Utils");
const CliHelper_1 = require("../utils/CliHelper");
const ValidationsHandler_1 = require("../utils/ValidationsHandler");
const Command_1 = require("./Command");
const K = Utils_1.default.extendCommonKeys({
    https: 'hasRootHttps'
});
class Login extends Command_1.default {
    constructor() {
        super(...arguments);
        this.command = 'login';
        this.description = 'Login to a CapRover machine. You can be logged in to multiple machines simultaneously.';
        this.options = (params) => [
            this.getDefaultConfigFileOption(),
            {
                name: K.https,
                hide: true,
                when: false
            },
            {
                name: K.url,
                char: 'u',
                env: 'CAPROVER_URL',
                type: 'input',
                message: `CapRover machine URL address, it is "[http[s]://][${Constants_1.default.ADMIN_DOMAIN}.]your-captain-root.domain"`,
                default: params && Constants_1.default.SAMPLE_DOMAIN,
                filter: (url) => Utils_1.default.cleanAdminDomainUrl(url, this.paramValue(params, K.https)) || url,
                validate: (url) => ValidationsHandler_1.getErrorForDomain(url)
            },
            {
                name: K.pwd,
                char: 'p',
                env: 'CAPROVER_PASSWORD',
                type: 'password',
                message: 'CapRover machine password',
                validate: (password) => ValidationsHandler_1.getErrorForPassword(password)
            },
            {
                name: K.name,
                char: 'n',
                env: 'CAPROVER_NAME',
                type: 'input',
                message: 'CapRover machine name, with whom the login credentials are stored locally',
                default: params && CliHelper_1.default.get().findDefaultCaptainName(),
                filter: (name) => name.trim(),
                validate: (name) => ValidationsHandler_1.getErrorForMachineName(name)
            }
        ];
    }
    preAction(cmdLineoptions) {
        return __awaiter(this, void 0, void 0, function* () {
            StdOutUtil_1.default.printMessage('Login to a CapRover machine...\n');
            return Promise.resolve(cmdLineoptions);
        });
    }
    action(params) {
        return __awaiter(this, void 0, void 0, function* () {
            CliHelper_1.default.get().loginMachine({
                authToken: '',
                baseUrl: this.findParamValue(params, K.url).value,
                name: this.findParamValue(params, K.name).value
            }, this.findParamValue(params, K.pwd).value);
        });
    }
}
exports.default = Login;
//# sourceMappingURL=login.js.map